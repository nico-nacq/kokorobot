

<p>Now we need to generate the keys themselves. The program used to generate key pairs for the ssh protocol is called ssh-keygen. Run it at the command line without any options:</p>

<code>ssh-keygen</code>

<p>It will prompt you for the information it needs to generate the keys. Use all the default values (press Enter at every prompt).</p>
<p>The output from ssh-keygen will look something like this:</p>
<code>Generating public/private rsa key pair.
Enter file in which to save the key (/home/username/.ssh/id_rsa): 
Created directory '/home/username/.ssh'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/username/.ssh/id_rsa.
Your public key has been saved in /home/username/.ssh/id_rsa.pub.
The key fingerprint is:
d4:7b:66:c4:e6:ba:78:87:e7:23:08:c7:0d:d7:b0:7f username@crunch
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|         ...     |
|        . .P+    |
|       .. o=.    |
|     ...S+.e=    |
|      . o .=. E  |
|       o ... .   |
|      ..e.+.+    |
|        ...=..   |
+-----------------+</code>
<p>Your keys are now generated. There are two files, id_rsa and id_rsa.pub.</p>

<p></p>
<code>sftp user@server.myhost.com</code>
<p>Create a local directory, I named mine <b>Gemini</b>. I also created a subfolder for my website. In it, I created a file called index.gmi. Gemini uses .gmi files instead of html. To upload the file online via sftp:</p>
<code>put index.gmi</code>


Of course, this is possible. "The Gemini experience" is roughly equivalent to HTTP where the only request header is "Host" and the only response header is "Content-type" and HTML where the only tags are <p>, <pre>, <a>, <h1> through <h3>, <ul> and <li> and <blockquote>